import express from 'express';
import cors from 'cors';
import pg from 'pg';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// PostgreSQL connection
const pool = new pg.Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Initialize database
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS equipos (
        numero INTEGER PRIMARY KEY,
        usuario VARCHAR(255),
        estado VARCHAR(50),
        problema TEXT,
        hora_entrada TIMESTAMP,
        hora_salida TIMESTAMP
      )
    `);
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS historico (
        id SERIAL PRIMARY KEY,
        numero INTEGER,
        usuario VARCHAR(255),
        estado VARCHAR(50),
        problema TEXT,
        hora_entrada TIMESTAMP,
        hora_salida TIMESTAMP,
        fecha DATE
      )
    `);
    
    console.log('âœ… Base de datos inicializada');
  } catch (err) {
    console.error('Error al inicializar BD:', err);
  } finally {
    client.release();
  }
}

initDB();

// API Routes

// Obtener todos los equipos activos
app.get('/api/equipos', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM equipos');
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error al obtener equipos' });
  }
});

// Registrar entrada
app.post('/api/equipos/:numero', async (req, res) => {
  const { numero } = req.params;
  const { usuario, estado, problema } = req.body;
  
  try {
    const result = await pool.query(
      `INSERT INTO equipos (numero, usuario, estado, problema, hora_entrada, hora_salida)
       VALUES ($1, $2, $3, $4, NOW(), NULL)
       ON CONFLICT (numero) 
       DO UPDATE SET usuario = $2, estado = $3, problema = $4, hora_entrada = NOW(), hora_salida = NULL
       RETURNING *`,
      [numero, usuario, estado, problema || null]
    );
    res.json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error al registrar entrada' });
  }
});

// Registrar salida
app.post('/api/equipos/:numero/salida', async (req, res) => {
  const { numero } = req.params;
  
  try {
    // Obtener datos del equipo
    const equipo = await pool.query('SELECT * FROM equipos WHERE numero = $1', [numero]);
    
    if (equipo.rows.length === 0) {
      return res.status(404).json({ error: 'Equipo no encontrado' });
    }
    
    // Guardar en histÃ³rico
    await pool.query(
      `INSERT INTO historico (numero, usuario, estado, problema, hora_entrada, hora_salida, fecha)
       VALUES ($1, $2, $3, $4, $5, NOW(), CURRENT_DATE)`,
      [
        equipo.rows[0].numero,
        equipo.rows[0].usuario,
        equipo.rows[0].estado,
        equipo.rows[0].problema,
        equipo.rows[0].hora_entrada
      ]
    );
    
    // Eliminar de equipos activos
    await pool.query('DELETE FROM equipos WHERE numero = $1', [numero]);
    
    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error al registrar salida' });
  }
});

// Obtener histÃ³rico del dÃ­a
app.get('/api/historico', async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT * FROM historico WHERE fecha = CURRENT_DATE ORDER BY hora_entrada DESC'
    );
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error al obtener histÃ³rico' });
  }
});

// Servir React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`ðŸš€ Servidor corriendo en puerto ${PORT}`);
});